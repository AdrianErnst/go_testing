# -*- mode: Python -*-

def secret_yaml_generic(name, namespace="", from_file=None, secret_type=None, from_env_file=None):
  args = [
    "kubectl",
    "create",
    "secret",
    "generic",
    name,
  ]

  if namespace:
    args.extend(["-n", namespace])

  generator = False
  if from_file:
    if type(from_file) == "string":
      args.extend(["--from-file", from_file])
      generator = True
    elif type(from_file) == "list":
      for f in from_file:
        args.extend(["--from-file", f])
      generator = True
    else:
      fail("Bad from_file argument: %s" % from_file)

  if from_env_file:
    if type(from_env_file) != "string":
      fail("from_env_file only accepts strings")

    args.extend(["--from-env-file", from_env_file])
    generator = True

  if not generator:
    fail("No secret generator specified")

  if secret_type:
    if type(secret_type) == "string":
      args.extend(["--type", secret_type])
    else:
      fail("Bad secret_type argument: %s" % secret_type)

  args.extend(["-o=yaml", "--dry-run=client"])
  return local(args, quiet=True, echo_off=True)

def secret_create_generic(name, namespace="", from_file=None, secret_type=None, from_env_file=None):
  k8s_yaml(secret_yaml_generic(name, namespace, from_file, secret_type, from_env_file))

def deploy_secrets(res_name, local_secrets):
    objs = []
    for secret in local_secrets:
        name = local_secrets[secret][0]
        namespace = local_secrets[secret][1]
        if os.path.exists(secret):
            secret_create_generic(name, namespace=namespace, from_env_file=secret)
            objs.append("{}:secret".format(name))
    
    if len(objs) > 0:
        k8s_resource(
            '',
            res_name,
            objects = objs
        )